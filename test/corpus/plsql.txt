================================================================================
Oracle Parameter modes
================================================================================

CREATE PROCEDURE foo(param IN OUT VARCHAR2)
BEGIN
  RETURN param;
END;

--------------------------------------------------------------------------------

(source_file
  (create_function_statement
    (identifier)
    (function_parameters
      (function_parameter
        (identifier)
        (function_argmode)
        (type
          (identifier))))
    (function_body
      (compound_statement
        (return_statement
          (identifier))))))

================================================================================
PG Parameter modes
================================================================================

CREATE PROCEDURE foo(INOUT param VARCHAR2)
BEGIN
  RETURN param;
END;

--------------------------------------------------------------------------------

(source_file
  (create_function_statement
    (identifier)
    (function_parameters
      (function_parameter
        (function_argmode)
        (identifier)
        (type
          (identifier))))
    (function_body
      (compound_statement
        (return_statement
          (identifier))))))

================================================================================
NOCOPY
================================================================================

CREATE OR REPLACE PROCEDURE foo(param OUT NOCOPY VARCHAR2)
BEGIN
  RETURN param;
END;

--------------------------------------------------------------------------------

(source_file
  (create_function_statement
    (identifier)
    (function_parameters
      (function_parameter
        (identifier)
        (function_argmode)
        (type
          (identifier))))
    (function_body
      (compound_statement
        (return_statement
          (identifier))))))

================================================================================
DYNAMIC RESULT SETS
================================================================================

CREATE PROCEDURE proc()
  DYNAMIC RESULT SETS 1
BEGIN
  RETURN 1;
END;

--------------------------------------------------------------------------------

(source_file
  (create_function_statement
    (identifier)
    (function_parameters)
    (dynamic_result_sets_hint
      (number))
    (function_body
      (compound_statement
        (return_statement
          (number))))))

================================================================================
AUTHID
================================================================================

CREATE PROCEDURE proc()
  AUTHID CURRENT_USER
BEGIN
  RETURN 1;
END;

--------------------------------------------------------------------------------

(source_file
  (create_function_statement
    (identifier)
    (function_parameters)
    (invoker_rights_hint
      (role_specification))
    (function_body
      (compound_statement
        (return_statement
          (number))))))

================================================================================
IS/AS clause
================================================================================

CREATE PROCEDURE proc() AS
BEGIN
  RETURN 1;
END;

CREATE PROCEDURE proc() IS
BEGIN
  RETURN 1;
END;

--------------------------------------------------------------------------------

(source_file
  (create_function_statement
    (identifier)
    (function_parameters)
    (function_body
      (compound_statement
        (return_statement
          (number)))))
  (create_function_statement
    (identifier)
    (function_parameters)
    (function_body
      (compound_statement
        (return_statement
          (number))))))

================================================================================
Declare section
================================================================================

CREATE PROCEDURE proc()
IS
  x BOOLEAN NOT NULL := FALSE;
  y NUMBER;
lb: BEGIN
  RETURN 1;
END lb;

--------------------------------------------------------------------------------

(source_file
  (create_function_statement
    (identifier)
    (function_parameters)
    (declare_section
      (variable_declaration
        (identifier)
        (type
          (identifier))
        (null_constraint
          (NULL))
        (FALSE))
      (variable_declaration
        (identifier)
        (type
          (identifier))))
    (function_body
      (label
        (identifier))
      (compound_statement
        (return_statement
          (number))
        (identifier)))))

================================================================================
Assignment statement
================================================================================

CREATE PROCEDURE proc() AS
BEGIN
  a := (b * c) + d;
  a := 'str';
  a := UPPER('str');
  a := (b > 100);
  a.b := 'str';
END;

--------------------------------------------------------------------------------

(source_file
  (create_function_statement
    (identifier)
    (function_parameters)
    (function_body
      (compound_statement
        (assignment_statement
          (identifier)
          (binary_expression
            (binary_expression
              (identifier)
              (identifier))
            (identifier)))
        (assignment_statement
          (identifier)
          (string))
        (assignment_statement
          (identifier)
          (function_call
            (identifier)
            (string)))
        (assignment_statement
          (identifier)
          (binary_expression
            (identifier)
            (number)))
        (assignment_statement
          (dotted_name
            (identifier)
            (identifier))
          (string))))))

================================================================================
Constant declaration
================================================================================

CREATE PROCEDURE proc()
IS
  A CONSTANT BOOLEAN NOT NULL := FALSE;
  B CONSTANT BOOLEAN NOT NULL DEFAULT TRUE;
lb: BEGIN
  RETURN 1;
END lb;

--------------------------------------------------------------------------------

(source_file
  (create_function_statement
    (identifier)
    (function_parameters)
    (declare_section
      (constant_declaration
        (identifier)
        (type
          (identifier))
        (null_constraint
          (NULL))
        (FALSE))
      (constant_declaration
        (identifier)
        (type
          (identifier))
        (null_constraint
          (NULL))
        (TRUE)))
    (function_body
      (label
        (identifier))
      (compound_statement
        (return_statement
          (number))
        (identifier)))))

================================================================================
TYPE attribute
================================================================================

CREATE PROCEDURE proc()
IS
  b a%TYPE;
lb: BEGIN
  RETURN 1;
END lb;

--------------------------------------------------------------------------------

(source_file
  (create_function_statement
    (identifier)
    (function_parameters)
    (declare_section
      (variable_declaration
        (identifier)
        (type_attribute
          (identifier))))
    (function_body
      (label
        (identifier))
      (compound_statement
        (return_statement
          (number))
        (identifier)))))

================================================================================
ROWTYPE attribute
================================================================================

CREATE PROCEDURE proc()
IS
  b a%ROWTYPE;
lb: BEGIN
  RETURN 1;
END lb;

--------------------------------------------------------------------------------

(source_file
  (create_function_statement
    (identifier)
    (function_parameters)
    (declare_section
      (variable_declaration
        (identifier)
        (rowtype_attribute
          (identifier))))
    (function_body
      (label
        (identifier))
      (compound_statement
        (return_statement
          (number))
        (identifier)))))

================================================================================
Subtype definition
================================================================================

CREATE PROCEDURE proc()
IS
  SUBTYPE POSITIVE IS BINARY_INTEGER RANGE 1 .. 2147483647 NOT NULL;
  SUBTYPE CS IS CHAR(10) CHARACTER SET abc NOT NULL;
lb: BEGIN
  RETURN 1;
END lb;

--------------------------------------------------------------------------------

(source_file
  (create_function_statement
    (identifier)
    (function_parameters)
    (declare_section
      (subtype_definition
        (identifier)
        (type
          (identifier))
        (range
          (number)
          (number))
        (null_constraint
          (NULL)))
      (subtype_definition
        (identifier)
        (type
          (identifier)
          (number))
        (character_set
          (identifier))
        (null_constraint
          (NULL))))
    (function_body
      (label
        (identifier))
      (compound_statement
        (return_statement
          (number))
        (identifier)))))

================================================================================
IF-THEN-ELSIF
================================================================================

CREATE PROCEDURE proc()
IS
BEGIN
  IF sales > (quota + 200) THEN
    bonus := (sales - quota)/4;
  ELSIF sales > 10 THEN
    RETURN 100;
  ELSE
    SELECT * FROM tb;
    IF sales > quota THEN
      bonus := 50;
    ELSIF sales > 10 THEN
      bonus := 50;
    ELSIF sales > 20 THEN
      bonus := 50;
    ELSE
      bonus := 0;
    END IF;
    RETURN 100;
  END IF;
END;

--------------------------------------------------------------------------------

(source_file
  (create_function_statement
    (identifier)
    (function_parameters)
    (function_body
      (compound_statement
        (if_statement
          (binary_expression
            (identifier)
            (binary_expression
              (identifier)
              (number)))
          (assignment_statement
            (identifier)
            (binary_expression
              (binary_expression
                (identifier)
                (identifier))
              (number)))
          (elsif_clause
            (binary_expression
              (identifier)
              (number))
            (return_statement
              (number)))
          (else_clause
            (select_statement
              (select_clause
                (select_item
                  (asterisk_expression)))
              (from_clause
                (from_item
                  (identifier))))
            (if_statement
              (binary_expression
                (identifier)
                (identifier))
              (assignment_statement
                (identifier)
                (number))
              (elsif_clause
                (binary_expression
                  (identifier)
                  (number))
                (assignment_statement
                  (identifier)
                  (number)))
              (elsif_clause
                (binary_expression
                  (identifier)
                  (number))
                (assignment_statement
                  (identifier)
                  (number)))
              (else_clause
                (assignment_statement
                  (identifier)
                  (number))))
            (return_statement
              (number))))))))

================================================================================
Basic loop
================================================================================

CREATE PROCEDURE proc()
IS
BEGIN
  <<l1>>
  LOOP
    i := i + 1;
    DBMS_OUTPUT.PUT_LINE ('i = ' || i);

    l2: LOOP
      j := j + 1;
      DBMS_OUTPUT.PUT_LINE ('j = ' || j);
    END LOOP l2;

    DBMS_OUTPUT.PUT_LINE ('Exited inner loop');
  END LOOP l1;
END;

--------------------------------------------------------------------------------

(source_file
  (create_function_statement
    (identifier)
    (function_parameters)
    (function_body
      (compound_statement
        (label
          (identifier))
        (basic_loop_statement
          (assignment_statement
            (identifier)
            (binary_expression
              (identifier)
              (number)))
          (function_call
            (dotted_name
              (identifier)
              (identifier))
            (binary_expression
              (string)
              (identifier)))
          (label
            (identifier))
          (basic_loop_statement
            (assignment_statement
              (identifier)
              (binary_expression
                (identifier)
                (number)))
            (function_call
              (dotted_name
                (identifier)
                (identifier))
              (binary_expression
                (string)
                (identifier)))
            (identifier))
          (function_call
            (dotted_name
              (identifier)
              (identifier))
            (string))
          (identifier))))))

================================================================================
Labels
================================================================================

CREATE PROCEDURE proc()
IS
BEGIN
  <<l1>>
  LOOP
    i := 1;
  END LOOP;
  l2:
  LOOP
    i := 2;
  END LOOP;
END;

--------------------------------------------------------------------------------

(source_file
  (create_function_statement
    (identifier)
    (function_parameters)
    (function_body
      (compound_statement
        (label
          (identifier))
        (basic_loop_statement
          (assignment_statement
            (identifier)
            (number)))
        (label
          (identifier))
        (basic_loop_statement
          (assignment_statement
            (identifier)
            (number)))))))

================================================================================
EXIT statement
================================================================================

CREATE PROCEDURE proc()
IS
BEGIN
  <<l1>>
  LOOP
    EXIT;
    EXIT l1;
    EXIT l1 WHEN (i > 2);
  END LOOP;
END;

--------------------------------------------------------------------------------

(source_file
  (create_function_statement
    (identifier)
    (function_parameters)
    (function_body
      (compound_statement
        (label
          (identifier))
        (basic_loop_statement
          (exit_statement)
          (exit_statement
            (identifier))
          (exit_statement
            (identifier)
            (binary_expression
              (identifier)
              (number))))))))

================================================================================
CONTINUE statement
================================================================================

CREATE PROCEDURE proc()
IS
BEGIN
  <<l1>>
  LOOP
    CONTINUE;
    CONTINUE l1;
    CONTINUE l1 WHEN (i > 2);
  END LOOP;
END;

--------------------------------------------------------------------------------

(source_file
  (create_function_statement
    (identifier)
    (function_parameters)
    (function_body
      (compound_statement
        (label
          (identifier))
        (basic_loop_statement
          (continue_statement)
          (continue_statement
            (identifier))
          (continue_statement
            (identifier)
            (binary_expression
              (identifier)
              (number))))))))

================================================================================
WHILE LOOP
================================================================================

CREATE PROCEDURE proc()
IS
BEGIN
  <<l1>>
  WHILE i < 10 LOOP
    CONTINUE;
  END LOOP l1;
END;

--------------------------------------------------------------------------------

(source_file
  (create_function_statement
    (identifier)
    (function_parameters)
    (function_body
      (compound_statement
        (label
          (identifier))
        (while_loop_statement
          (binary_expression
            (identifier)
            (number))
          (continue_statement)
          (identifier))))))

================================================================================
Steped range iteration control
================================================================================

CREATE PROCEDURE proc()
IS
BEGIN
  <<l1>>
  FOR
    m MUTABLE NUMBER(5,1),
    n IMMUTABLE NUMBER(5,1)
  IN
    REVERSE 1.0 .. 3.0 BY 0.5,
    REVERSE 1 .. 6
  LOOP
    EXIT l1 WHEN (i > 2);
  END LOOP l1;
END;

--------------------------------------------------------------------------------

(source_file
  (create_function_statement
    (identifier)
    (function_parameters)
    (function_body
      (compound_statement
        (label
          (identifier))
        (for_loop_statement
          (iterator
            (iterand_decl
              (identifier)
              (type
                (identifier)
                (number)
                (number)))
            (iterand_decl
              (identifier)
              (type
                (identifier)
                (number)
                (number)))
            (qual_iteration_ctl
              (stepped_control
                (number)
                (number)
                (number)))
            (qual_iteration_ctl
              (stepped_control
                (number)
                (number))))
          (exit_statement
            (identifier)
            (binary_expression
              (identifier)
              (number)))
          (identifier))))))

================================================================================
VALUES OF iteration control
================================================================================

CREATE PROCEDURE proc()
IS
BEGIN
   FOR i IN VALUES OF vec LOOP
    RETURN 1;
   END LOOP;

   FOR i IN VALUES OF fn() LOOP
    RETURN 1;
   END LOOP;

   FOR i IN VALUES OF (UPDATE tb SET a = 1) LOOP
    RETURN 1;
   END LOOP;
END;

--------------------------------------------------------------------------------

(source_file
  (create_function_statement
    (identifier)
    (function_parameters)
    (function_body
      (compound_statement
        (for_loop_statement
          (iterator
            (iterand_decl
              (identifier))
            (qual_iteration_ctl
              (values_of_control
                (identifier))))
          (return_statement
            (number)))
        (for_loop_statement
          (iterator
            (iterand_decl
              (identifier))
            (qual_iteration_ctl
              (values_of_control
                (function_call
                  (identifier)))))
          (return_statement
            (number)))
        (for_loop_statement
          (iterator
            (iterand_decl
              (identifier))
            (qual_iteration_ctl
              (values_of_control
                (update_statement
                  (identifier)
                  (set_clause
                    (assignment_expression
                      (identifier)
                      (number)))))))
          (return_statement
            (number)))))))

================================================================================
INDICES OF iteration control
================================================================================

CREATE PROCEDURE proc()
IS
BEGIN
   FOR i IN INDICES OF vec LOOP
    RETURN 1;
   END LOOP;

   FOR i IN INDICES OF fn() LOOP
    RETURN 1;
   END LOOP;

   FOR i IN INDICES OF (UPDATE tb SET a = 1) LOOP
    RETURN 1;
   END LOOP;
END;

--------------------------------------------------------------------------------

(source_file
  (create_function_statement
    (identifier)
    (function_parameters)
    (function_body
      (compound_statement
        (for_loop_statement
          (iterator
            (iterand_decl
              (identifier))
            (qual_iteration_ctl
              (indices_of_control
                (identifier))))
          (return_statement
            (number)))
        (for_loop_statement
          (iterator
            (iterand_decl
              (identifier))
            (qual_iteration_ctl
              (indices_of_control
                (function_call
                  (identifier)))))
          (return_statement
            (number)))
        (for_loop_statement
          (iterator
            (iterand_decl
              (identifier))
            (qual_iteration_ctl
              (indices_of_control
                (update_statement
                  (identifier)
                  (set_clause
                    (assignment_expression
                      (identifier)
                      (number)))))))
          (return_statement
            (number)))))))

================================================================================
PAIRS OF iteration control
================================================================================

CREATE PROCEDURE proc()
IS
BEGIN
   FOR i IN fn() LOOP
    RETURN 1;
   END LOOP;

   FOR i IN PAIRS OF vec LOOP
    RETURN 1;
   END LOOP;

   FOR i IN PAIRS OF fn() LOOP
    RETURN 1;
   END LOOP;

   FOR i IN PAIRS OF (UPDATE tb SET a = 1) LOOP
    RETURN 1;
   END LOOP;
END;

--------------------------------------------------------------------------------

(source_file
  (create_function_statement
    (identifier)
    (function_parameters)
    (function_body
      (compound_statement
        (for_loop_statement
          (iterator
            (iterand_decl
              (identifier))
            (qual_iteration_ctl
              (single_expression_control
                (function_call
                  (identifier)))))
          (return_statement
            (number)))
        (for_loop_statement
          (iterator
            (iterand_decl
              (identifier))
            (qual_iteration_ctl
              (pairs_of_control
                (identifier))))
          (return_statement
            (number)))
        (for_loop_statement
          (iterator
            (iterand_decl
              (identifier))
            (qual_iteration_ctl
              (pairs_of_control
                (function_call
                  (identifier)))))
          (return_statement
            (number)))
        (for_loop_statement
          (iterator
            (iterand_decl
              (identifier))
            (qual_iteration_ctl
              (pairs_of_control
                (update_statement
                  (identifier)
                  (set_clause
                    (assignment_expression
                      (identifier)
                      (number)))))))
          (return_statement
            (number)))))))

================================================================================
Single statement iteration control
================================================================================

CREATE PROCEDURE proc()
IS
BEGIN
   FOR i IN (UPDATE tb SET a = 1) LOOP
    RETURN 1;
   END LOOP;
END;

--------------------------------------------------------------------------------

(source_file
  (create_function_statement
    (identifier)
    (function_parameters)
    (function_body
      (compound_statement
        (for_loop_statement
          (iterator
            (iterand_decl
              (identifier))
            (qual_iteration_ctl
              (cursor_iteration_control
                (update_statement
                  (identifier)
                  (set_clause
                    (assignment_expression
                      (identifier)
                      (number)))))))
          (return_statement
            (number)))))))

================================================================================
Multiple iteration controls
================================================================================

CREATE PROCEDURE proc()
IS
BEGIN
   FOR i IN 1 .. 3, REVERSE i+1 .. i+10, 51 .. 55 LOOP
      DBMS_OUTPUT.PUT_LINE(i);
   END LOOP;
END;

--------------------------------------------------------------------------------

(source_file
  (create_function_statement
    (identifier)
    (function_parameters)
    (function_body
      (compound_statement
        (for_loop_statement
          (iterator
            (iterand_decl
              (identifier))
            (qual_iteration_ctl
              (stepped_control
                (number)
                (number)))
            (qual_iteration_ctl
              (stepped_control
                (binary_expression
                  (identifier)
                  (number))
                (binary_expression
                  (identifier)
                  (number))))
            (qual_iteration_ctl
              (stepped_control
                (number)
                (number))))
          (function_call
            (dotted_name
              (identifier)
              (identifier))
            (identifier)))))))

================================================================================
GOTO statement
================================================================================

CREATE PROCEDURE proc()
IS
BEGIN
  p := 0;
  GOTO print_now;
  p := 1;

  <<print_now>>
  DBMS_OUTPUT.PUT_LINE(p);
END;

--------------------------------------------------------------------------------

(source_file
  (create_function_statement
    (identifier)
    (function_parameters)
    (function_body
      (compound_statement
        (assignment_statement
          (identifier)
          (number))
        (goto_statement
          (identifier))
        (assignment_statement
          (identifier)
          (number))
        (label
          (identifier))
        (function_call
          (dotted_name
            (identifier)
            (identifier))
          (identifier))))))

================================================================================
NULL statement
================================================================================

CREATE PROCEDURE proc()
IS
BEGIN
  NULL;
END;

--------------------------------------------------------------------------------

(source_file
  (create_function_statement
    (identifier)
    (function_parameters)
    (function_body
      (compound_statement
        (null_statement)))))

================================================================================
Colletions
================================================================================

CREATE PROCEDURE proc()
IS
  TYPE population IS TABLE OF NUMBER INDEX BY VARCHAR2(64);
  TYPE Foursome IS VARRAY(4) OF VARCHAR2(15);
  TYPE Roster IS TABLE OF VARCHAR2(15);
BEGIN
  NULL;
END;

--------------------------------------------------------------------------------

(source_file
  (create_function_statement
    (identifier)
    (function_parameters)
    (declare_section
      (collection_type_definition
        (identifier)
        (assoc_array_type_def
          (type
            (identifier))
          (type
            (identifier)
            (number))))
      (collection_type_definition
        (identifier)
        (varray_type_def
          (number)
          (type
            (identifier)
            (number))))
      (collection_type_definition
        (identifier)
        (nested_table_type_def
          (type
            (identifier)
            (number)))))
    (function_body
      (compound_statement
        (null_statement)))))

================================================================================
Cursor
================================================================================

CREATE PROCEDURE proc()
IS
  CURSOR c1 (job IN VARCHAR2, max_sal NUMBER := 11) RETURN departments%ROWTYPE;    -- Declare c1

  CURSOR c2 IS                             -- Declare and define c2
    SELECT employee_id, job_id, salary FROM employees
    WHERE salary > 2000;

  CURSOR c1 RETURN departments%ROWTYPE IS  -- Define c1,
    SELECT * FROM departments              -- repeating return type
    WHERE department_id = 110;

  CURSOR c3 RETURN locations%ROWTYPE;      -- Declare c3

  CURSOR c3 IS                             -- Define c3,
    SELECT * FROM locations                -- omitting return type
    WHERE country_id = 'JP';
BEGIN
  NULL;
END;

--------------------------------------------------------------------------------

(source_file
  (create_function_statement
    (identifier)
    (function_parameters)
    (declare_section
      (cursor_declaration
        (identifier)
        (cursor_parameter_dec
          (identifier)
          (type
            (identifier)))
        (cursor_parameter_dec
          (identifier)
          (type
            (identifier))
          (number))
        (rowtype_attribute
          (identifier)))
      (comment)
      (cursor_definition
        (identifier)
        (comment)
        (select_statement
          (select_clause
            (select_item
              (identifier))
            (select_item
              (identifier))
            (select_item
              (identifier)))
          (from_clause
            (from_item
              (identifier)))
          (where_clause
            (binary_expression
              (identifier)
              (number)))))
      (cursor_definition
        (identifier)
        (rowtype_attribute
          (identifier))
        (comment)
        (select_statement
          (select_clause
            (select_item
              (asterisk_expression)))
          (from_clause
            (from_item
              (identifier)))
          (comment)
          (where_clause
            (binary_expression
              (identifier)
              (number)))))
      (cursor_declaration
        (identifier)
        (rowtype_attribute
          (identifier)))
      (comment)
      (cursor_definition
        (identifier)
        (comment)
        (select_statement
          (select_clause
            (select_item
              (asterisk_expression)))
          (from_clause
            (from_item
              (identifier)))
          (comment)
          (where_clause
            (binary_expression
              (identifier)
              (string))))))
    (function_body
      (compound_statement
        (null_statement)))))

================================================================================
FORALL statement
================================================================================

CREATE PROCEDURE proc()
IS
BEGIN
  FORALL i IN l .. h + 1 INSERT INTO foo(a, b) VALUES (i, i + 1);
  FORALL i IN INDICES OF bar INSERT INTO foo(a, b) VALUES (i, i + 1);
  FORALL i IN INDICES OF cust_tab BETWEEN l AND h + 1 INSERT INTO foo(a, b) VALUES (i, i + 1);
  FORALL i IN VALUES OF bar INSERT INTO foo(a, b) VALUES (i, i + 1);
END;

--------------------------------------------------------------------------------

(source_file
  (create_function_statement
    (identifier)
    (function_parameters)
    (function_body
      (compound_statement
        (forall_statement
          (identifier)
          (bounds_clause
            (identifier)
            (binary_expression
              (identifier)
              (number)))
          (insert_statement
            (identifier)
            (column_names
              (identifier)
              (identifier))
            (values_clause
              (values_item
                (identifier)
                (binary_expression
                  (identifier)
                  (number))))))
        (forall_statement
          (identifier)
          (bounds_clause
            (identifier))
          (insert_statement
            (identifier)
            (column_names
              (identifier)
              (identifier))
            (values_clause
              (values_item
                (identifier)
                (binary_expression
                  (identifier)
                  (number))))))
        (forall_statement
          (identifier)
          (bounds_clause
            (between_and_expression
              (identifier)
              (identifier)
              (binary_expression
                (identifier)
                (number))))
          (insert_statement
            (identifier)
            (column_names
              (identifier)
              (identifier))
            (values_clause
              (values_item
                (identifier)
                (binary_expression
                  (identifier)
                  (number))))))
        (forall_statement
          (identifier)
          (bounds_clause
            (identifier))
          (insert_statement
            (identifier)
            (column_names
              (identifier)
              (identifier))
            (values_clause
              (values_item
                (identifier)
                (binary_expression
                  (identifier)
                  (number))))))))))

================================================================================
OPEN statement
================================================================================

CREATE PROCEDURE proc()
IS
BEGIN
  OPEN cur('ST_CLERK', 5000);
END;

--------------------------------------------------------------------------------

(source_file
  (create_function_statement
    (identifier)
    (function_parameters)
    (function_body
      (compound_statement
        (open_statement
          (identifier)
          (string)
          (number))))))

================================================================================
CLOSE statement
================================================================================

CREATE PROCEDURE proc()
IS
BEGIN
  CLOSE cur;
END;

--------------------------------------------------------------------------------

(source_file
  (create_function_statement
    (identifier)
    (function_parameters)
    (function_body
      (compound_statement
        (close_statement
          (identifier))))))

================================================================================
OPEN FOR statement
================================================================================

CREATE PROCEDURE proc()
IS
BEGIN
  OPEN cur FOR SELECT * FROM foo;
  OPEN cur FOR 'SELECT * FROM TABLE(:1)' USING v1;
  stmt := 'SELECT * FROM foo WHERE id = :i';
  OPEN cur FOR stmt USING 'value';
END;

--------------------------------------------------------------------------------

(source_file
  (create_function_statement
    (identifier)
    (function_parameters)
    (function_body
      (compound_statement
        (open_for_statement
          (identifier)
          (select_statement
            (select_clause
              (select_item
                (asterisk_expression)))
            (from_clause
              (from_item
                (identifier)))))
        (open_for_statement
          (identifier)
          (string)
          (bind_variables
            (identifier)))
        (assignment_statement
          (identifier)
          (string))
        (open_for_statement
          (identifier)
          (identifier)
          (bind_variables
            (string)))))))

================================================================================
Exception handlers
================================================================================

CREATE PROCEDURE proc()
IS
BEGIN
  temp := col;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE ('No Data found' || temp);
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE ('Unexpected error');
END;

--------------------------------------------------------------------------------

(source_file
  (create_function_statement
    (identifier)
    (function_parameters)
    (function_body
      (compound_statement
        (assignment_statement
          (identifier)
          (identifier))
        (exception_handler
          (identifier)
          (function_call
            (dotted_name
              (identifier)
              (identifier))
            (binary_expression
              (string)
              (identifier))))
        (exception_handler
          (identifier)
          (function_call
            (dotted_name
              (identifier)
              (identifier))
            (string)))))))

================================================================================
FETCH statement
================================================================================

CREATE PROCEDURE proc()
IS
BEGIN
  FETCH c1 INTO v1, v2, v3;
  FETCH c1 BULK COLLECT INTO v1, v2, v3 LIMIT 10;
END;

--------------------------------------------------------------------------------

(source_file
  (create_function_statement
    (identifier)
    (function_parameters)
    (function_body
      (compound_statement
        (fetch_statement
          (identifier)
          (into_clause
            (identifier)
            (identifier)
            (identifier)))
        (fetch_statement
          (identifier)
          (bulk_collect_into_clause
            (identifier)
            (identifier)
            (identifier))
          (limit_clause
            (number)))))))

================================================================================
RAISE statement
================================================================================

CREATE PROCEDURE proc()
IS
BEGIN
  RAISE;
  RAISE INVALID_NUMBER;
  RAISE exception1;
END;

--------------------------------------------------------------------------------

(source_file
  (create_function_statement
    (identifier)
    (function_parameters)
    (function_body
      (compound_statement
        (raise_statement)
        (raise_statement
          (identifier))
        (raise_statement
          (identifier))))))

================================================================================
RETURNING INTO clause
================================================================================

DELETE FROM foo RETURNING a, b INTO x, y;
DELETE FROM foo RETURNING INTO x, y;
DELETE FROM foo RETURNING BULK COLLECT INTO x, y;

--------------------------------------------------------------------------------

(source_file
  (delete_statement
    (identifier)
    (returning_into_clause
      (identifier)
      (identifier)
      (into_clause
        (identifier)
        (identifier))))
  (delete_statement
    (identifier)
    (returning_into_clause
      (into_clause
        (identifier)
        (identifier))))
  (delete_statement
    (identifier)
    (returning_into_clause
      (bulk_collect_into_clause
        (identifier)
        (identifier)))))
